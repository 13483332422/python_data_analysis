"""
本章讨论Python的内置功能，这些功能本书会用到很多。
虽然扩展库，比如pandas和Numpy，使处理大数据集很方便，
但它们是和Python的内置数据处理工具一同使用的。
我们会从Python最基础的数据结构开始：元组、列表、字典和集合。
然后会讨论创建你自己的、可重复使用的Python函数。
最后，会学习Python的文件对象，以及如何与本地硬盘交互。
"""
"""#######################3.1 数据结构和序列###########################"""

#元组:元组是一个固定长度，不可改变的Python序列对象。
# 创建元组的最简单方式，是用逗号分隔一列值：
tup = 1,2,3,4
#(1, 2, 3, 4)

#当用复杂的表达式定义元组，最好将值放到圆括号内，如下所示：
nested_tup = (1,2,3),(4,5,6)
#((1, 2, 3), (4, 5, 6))

#用tuple可以将任意序列或迭代器转换成元组：
tuple([1,2,3])
# (1, 2, 3)
tup = tuple('string')
# ('s', 't', 'r', 'i', 'n', 'g')

#可以用方括号访问元组中的元素。和C、C++、JAVA等语言一样，序列是从0开始的：
tup[0]#'s'

#可以用加号运算符将元组串联起来：
(1,2,3)+(2,3,4)
#(1, 2, 3, 2, 3, 4)

#元组乘以一个整数，像列表一样，会将几个元组的复制串联起来：
(1,2,3)*2
#(1, 2, 3, 1, 2, 3)

#如果你想将元组赋值给类似元组的变量，Python会试图拆分等号右边的值：
tup = (1,2,3)
a,b,c = tup
#即使含有元组也依然可以拆分
tup = 4, 5, (6, 7)
a, b, (c, d) = tup

#交换
a = 1
b = 2
b,a = a,b #a现在是2,b是1

#变量拆分常用来迭代元组或列表序列：
seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
for a, b, c in seq:
    print('a={0}, b={1}, c={2}'.format(a, b, c))
# a=1, b=2, c=3
# a=4, b=5, c=6
# a=7, b=8, c=9

#从元组的开头“摘取”几个元素
seq = (1,2,3,4,5,6,7)
a,b ,*rest = seq # a= 1 ,b =2, rest=[3, 4, 5, 6, 7]
#如果rest的名字不重要。作为惯用写法，许多Python程序员会将不需要的变量使用下划线：
a,b ,*_= seq




